This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-31T06:44:45.342Z

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
java/ninja/trek/cakewood/CakeWood.java
java/ninja/trek/cakewood/CakeWoodBlock.java
java/ninja/trek/cakewood/CakeWoodClient.java
java/ninja/trek/cakewood/CakeWoodDataGenerator.java
java/ninja/trek/cakewood/CakeWoodRegistry.java
java/ninja/trek/cakewood/mixin/ExampleMixin.java
repomixx - dontignore.bat
repomixx.bat
resources/assets/cakewood/models/block/cake_wood_base.json
resources/assets/cakewood/models/item/cake_wood_item.json
resources/cakewood.mixins.json
resources/fabric.mod.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="java/ninja/trek/cakewood/CakeWood.java">
package ninja.trek.cakewood;
import net.fabricmc.api.ModInitializer;
import net.minecraft.util.Identifier;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
public class CakeWood implements ModInitializer {
    public static final String MOD_ID = "cakewood";
    public static final Logger LOGGER = LoggerFactory.getLogger(MOD_ID);
    @Override
    public void onInitialize() {
        // Register all CakeWood variants
        CakeWoodRegistry.register();
        LOGGER.info("CakeWood Mod Initialized - Let them eat cake... wood!");
    }
    // Utility method to create identifiers for this mod
    public static Identifier id(String path) {
        return Identifier.of(MOD_ID, path);
    }
}
</file>

<file path="java/ninja/trek/cakewood/CakeWoodBlock.java">
package ninja.trek.cakewood;
import net.minecraft.block.Block;
import net.minecraft.block.BlockState;
import net.minecraft.block.ShapeContext;
import net.minecraft.entity.player.PlayerEntity;
import net.minecraft.item.ItemPlacementContext;
import net.minecraft.state.StateManager;
import net.minecraft.state.property.DirectionProperty;
import net.minecraft.state.property.IntProperty;
import net.minecraft.util.ActionResult;
import net.minecraft.util.hit.BlockHitResult;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.Direction;
import net.minecraft.util.shape.VoxelShape;
import net.minecraft.util.shape.VoxelShapes;
import net.minecraft.world.BlockView;
import net.minecraft.world.World;
import net.minecraft.world.event.GameEvent;
import net.minecraft.sound.SoundEvents;
import net.minecraft.sound.SoundCategory;
public class CakeWoodBlock extends Block {
    public static final int MAX_BITES = 7;
    public static final IntProperty TOP_BITES = IntProperty.of("top_bites", 0, MAX_BITES);
    public static final IntProperty BOTTOM_BITES = IntProperty.of("bottom_bites", 0, MAX_BITES);
    public static final DirectionProperty TOP_FACING = DirectionProperty.of("top_facing",
            Direction.NORTH, Direction.EAST, Direction.SOUTH, Direction.WEST);
    public static final DirectionProperty BOTTOM_FACING = DirectionProperty.of("bottom_facing",
            Direction.NORTH, Direction.EAST, Direction.SOUTH, Direction.WEST);
    public CakeWoodBlock(Settings settings) {
        super(settings);
        setDefaultState(getStateManager().getDefaultState()
                .with(TOP_BITES, 0)
                .with(BOTTOM_BITES, 0)
                .with(TOP_FACING, Direction.NORTH)
                .with(BOTTOM_FACING, Direction.NORTH));
    }
    @Override
    protected void appendProperties(StateManager.Builder<Block, BlockState> builder) {
        builder.add(TOP_BITES, BOTTOM_BITES, TOP_FACING, BOTTOM_FACING);
    }
    @Override
    public VoxelShape getOutlineShape(BlockState state, BlockView world, BlockPos pos, ShapeContext context) {
        int topBites = state.get(TOP_BITES);
        int bottomBites = state.get(BOTTOM_BITES);
        Direction topFacing = state.get(TOP_FACING);
        Direction bottomFacing = state.get(BOTTOM_FACING);
        return VoxelShapes.union(
                getHalfShape(topBites, true, topFacing),
                getHalfShape(bottomBites, false, bottomFacing)
        );
    }
    private VoxelShape getHalfShape(int bites, boolean isTop, Direction facing) {
        if (bites >= MAX_BITES) {
            return VoxelShapes.empty();
        }
        float biteSize = bites * 2.0f; // Each bite is 2 pixels deep
        float yMin = isTop ? 0.5f : 0f;
        float yMax = isTop ? 1.0f : 0.5f;
        // Create the base shape based on the direction of bites
        return switch (facing) {
            case NORTH -> VoxelShapes.cuboid(
                    0.0625f,                    // xMin (1/16)
                    yMin,                       // yMin
                    0.0625f + biteSize/16.0f,   // zMin (adjusted by bites)
                    0.9375f,                    // xMax (15/16)
                    yMax,                       // yMax
                    0.9375f                     // zMax (15/16)
            );
            case SOUTH -> VoxelShapes.cuboid(
                    0.0625f,                    // xMin
                    yMin,                       // yMin
                    0.0625f,                    // zMin
                    0.9375f,                    // xMax
                    yMax,                       // yMax
                    0.9375f - biteSize/16.0f    // zMax (adjusted by bites)
            );
            case WEST -> VoxelShapes.cuboid(
                    0.0625f + biteSize/16.0f,   // xMin (adjusted by bites)
                    yMin,                       // yMin
                    0.0625f,                    // zMin
                    0.9375f,                    // xMax
                    yMax,                       // yMax
                    0.9375f                     // zMax
            );
            case EAST -> VoxelShapes.cuboid(
                    0.0625f,                    // xMin
                    yMin,                       // yMin
                    0.0625f,                    // zMin
                    0.9375f - biteSize/16.0f,   // xMax (adjusted by bites)
                    yMax,                       // yMax
                    0.9375f                     // zMax
            );
            default -> VoxelShapes.cuboid(
                    0.0625f, yMin, 0.0625f,
                    0.9375f, yMax, 0.9375f
            );
        };
    }
    @Override
    public ActionResult onUse(BlockState state, World world, BlockPos pos, PlayerEntity player, BlockHitResult hit) {
        if (world.isClient) {
            if (eatCakeWood(world, pos, state, player, hit).isAccepted()) {
                return ActionResult.SUCCESS;
            }
            return ActionResult.CONSUME;
        }
        return eatCakeWood(world, pos, state, player, hit);
    }
    private ActionResult eatCakeWood(World world, BlockPos pos, BlockState state, PlayerEntity player, BlockHitResult hit) {
        if (!player.canConsume(true)) {  // Allow eating even when not hungry
            return ActionResult.PASS;
        }
        // Get which half was clicked
        boolean isTopHalf = hit.getPos().y - pos.getY() >= 0.5;
        IntProperty bitesProp = isTopHalf ? TOP_BITES : BOTTOM_BITES;
        DirectionProperty facingProp = isTopHalf ? TOP_FACING : BOTTOM_FACING;
        int bites = state.get(bitesProp);
        if (bites >= MAX_BITES) {
            return ActionResult.PASS;
        }
        // Update facing based on player position for first bite
        Direction facing = bites == 0
                ? Direction.fromHorizontal((int)((player.getYaw() * 4.0f / 360.0f) + 0.5f) & 3).getOpposite()
                : state.get(facingProp);
        // Create new state with updated bites and facing
        BlockState newState = state.with(bitesProp, bites + 1)
                .with(facingProp, facing);
        // Apply the new state
        world.setBlockState(pos, newState,
                Block.NOTIFY_ALL | Block.REDRAW_ON_MAIN_THREAD | Block.FORCE_STATE);
        // Check if block should be removed
        if (newState.get(TOP_BITES) >= MAX_BITES &&
                newState.get(BOTTOM_BITES) >= MAX_BITES) {
            world.removeBlock(pos, false);
            world.emitGameEvent(player, GameEvent.BLOCK_DESTROY, pos);
        } else {
            world.emitGameEvent(player, GameEvent.BLOCK_CHANGE, pos);
        }
        // Apply effects
        player.getHungerManager().add(2, 0.1F);
        world.playSound(null, pos,
                SoundEvents.ENTITY_GENERIC_EAT,
                SoundCategory.BLOCKS,
                0.5f,
                world.random.nextFloat() * 0.1f + 0.9f
        );
        world.playSound(null, pos,
                SoundEvents.BLOCK_WOOD_BREAK,
                SoundCategory.BLOCKS,
                0.5f,
                world.random.nextFloat() * 0.1f + 0.9f
        );
        return ActionResult.SUCCESS;
    }
    @Override
    public BlockState getPlacementState(ItemPlacementContext ctx) {
        return getDefaultState()
                .with(TOP_FACING, ctx.getHorizontalPlayerFacing().getOpposite())
                .with(BOTTOM_FACING, ctx.getHorizontalPlayerFacing().getOpposite());
    }
    @Override
    public boolean hasComparatorOutput(BlockState state) {
        return true;
    }
    @Override
    public int getComparatorOutput(BlockState state, World world, BlockPos pos) {
        return Math.max(7 - state.get(TOP_BITES), 7 - state.get(BOTTOM_BITES));
    }
}
</file>

<file path="java/ninja/trek/cakewood/CakeWoodClient.java">
package ninja.trek.cakewood;
import net.fabricmc.api.ClientModInitializer;
public class CakeWoodClient implements ClientModInitializer {
    @Override
    public void onInitializeClient() {
        // Register client-side rendering and other client-specific features here
        CakeWood.LOGGER.info("CakeWood Client Initialized");
    }
}
</file>

<file path="java/ninja/trek/cakewood/CakeWoodDataGenerator.java">
package ninja.trek.cakewood;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import net.fabricmc.fabric.api.datagen.v1.DataGeneratorEntrypoint;
import net.fabricmc.fabric.api.datagen.v1.FabricDataGenerator;
import net.fabricmc.fabric.api.datagen.v1.FabricDataOutput;
import net.fabricmc.fabric.api.datagen.v1.provider.FabricModelProvider;
import net.minecraft.data.client.*;
import net.minecraft.item.BlockItem;
import net.minecraft.util.Identifier;
import net.minecraft.util.math.Direction;
import java.util.*;
public class CakeWoodDataGenerator implements DataGeneratorEntrypoint {
    @Override
    public void onInitializeDataGenerator(FabricDataGenerator fabricDataGenerator) {
        FabricDataGenerator.Pack pack = fabricDataGenerator.createPack();
        pack.addProvider(CakeWoodModelGenerator::new);
    }
    private static class CakeWoodModelGenerator extends FabricModelProvider {
        public CakeWoodModelGenerator(FabricDataOutput output) {
            super(output);
        }
        @Override
        public void generateBlockStateModels(BlockStateModelGenerator blockStateModelGenerator) {
            generateCakeWoodVariant(blockStateModelGenerator, "", "oak");
            for (Map.Entry<String, CakeWoodBlock> entry : CakeWoodRegistry.getAllVariantBlocks().entrySet()) {
                generateCakeWoodVariant(blockStateModelGenerator, entry.getKey(), entry.getKey());
            }
        }
        private void generateCakeWoodVariant(BlockStateModelGenerator generator, String variant, String textureName) {
            String prefix = variant.isEmpty() ? "" : variant + "_";
            CakeWoodBlock block = variant.isEmpty() ?
                    CakeWoodRegistry.CAKE_WOOD_BLOCK :
                    CakeWoodRegistry.getVariantBlock(variant);
            MultipartBlockStateSupplier stateSupplier = MultipartBlockStateSupplier.create(block);
            TextureKey CAKE_TEXTURE = TextureKey.of("cake_texture");
            for (int bites = 0; bites <= 7; bites++) {
                final int bitesValue = bites;
                for (boolean isTop : Arrays.asList(true, false)) {
                    String modelName = String.format("block/%scake_wood_%s_%d",
                            prefix, isTop ? "top" : "bottom", bites);
                    Model model = new Model(
                            Optional.of(Identifier.of(CakeWood.MOD_ID, "block/cake_wood_base")),
                            Optional.empty(),
                            CAKE_TEXTURE
                    );
                    TextureMap textureMap = new TextureMap()
                            .put(CAKE_TEXTURE, Identifier.of("minecraft", "block/" + textureName));
                    Identifier modelId = model.upload(
                            Identifier.of(CakeWood.MOD_ID, modelName),
                            textureMap,
                            generator.modelCollector,
                            (id, existingTextures) -> createBiteModelJson(bitesValue, isTop)
                    );
                    for (Direction facing : Direction.Type.HORIZONTAL) {
                        When condition = When.create()
                                .set(isTop ? CakeWoodBlock.TOP_BITES : CakeWoodBlock.BOTTOM_BITES, bites)
                                .set(isTop ? CakeWoodBlock.TOP_FACING : CakeWoodBlock.BOTTOM_FACING, facing);
                        stateSupplier.with(condition, BlockStateVariant.create()
                                .put(VariantSettings.MODEL, modelId)
                                .put(VariantSettings.Y, VariantSettings.Rotation.values()
                                        [(int) (facing.asRotation() / 90.0f)])
                        );
                    }
                }
            }
            generator.blockStateCollector.accept(stateSupplier);
        }
        private JsonObject createBiteModelJson(int bites, boolean isTop) {
            JsonObject modelData = new JsonObject();
            modelData.addProperty("parent", "block/block");
            JsonObject textures = new JsonObject();
            textures.addProperty("particle", "#cake_texture");
            textures.addProperty("cake_texture", "#cake_texture");
            modelData.add("textures", textures);
            JsonObject element = new JsonObject();
            int biteDepth = bites * 2;
            float yMin = isTop ? 8.0f : 0.0f;
            float yMax = isTop ? 16.0f : 8.0f;
            JsonArray from = new JsonArray();
            from.add(1);
            from.add( yMin);
            from.add( 1 + biteDepth);
            JsonArray to = new JsonArray();
            to.add(15);
            to.add(yMax);
            to.add(15);
            element.add("from", from);
            element.add("to", to);
            JsonObject faces = new JsonObject();
            addFace(faces, "north", 1, yMin, 15, yMax);
            addFace(faces, "east", 1 + biteDepth, yMin, 15, yMax);
            addFace(faces, "south", 1, yMin, 15, yMax);
            addFace(faces, "west", 1 + biteDepth, yMin, 15, yMax);
            addFace(faces, "up", 1, 1 + biteDepth, 15, 15);
            addFace(faces, "down", 1, 1 + biteDepth, 15, 15);
            element.add("faces", faces);
            JsonArray elements = new JsonArray();
            elements.add(element);
            modelData.add("elements", elements);
            return modelData;
        }
        private void addFace(JsonObject faces, String face, float uMin, float vMin, float uMax, float vMax) {
            JsonObject faceData = new JsonObject();
            JsonArray uv = new JsonArray();
            uv.add(uMin);
            uv.add(vMin);
            uv.add(uMax);
            uv.add(vMax);
            faceData.add("uv", uv);
            faceData.addProperty("texture", "#cake_texture");
            faces.add(face, faceData);
        }
        @Override
        public void generateItemModels(ItemModelGenerator itemModelGenerator) {
            generateItemModel(itemModelGenerator, "", CakeWoodRegistry.CAKE_WOOD_ITEM);
            for (Map.Entry<String, BlockItem> entry : CakeWoodRegistry.getAllVariantItems().entrySet()) {
                generateItemModel(itemModelGenerator, entry.getKey(), entry.getValue());
            }
        }
        private void generateItemModel(ItemModelGenerator generator, String variant, BlockItem item) {
            String textureName = variant.isEmpty() ? "oak" : variant;
            Models.GENERATED.upload(
                    ModelIds.getItemModelId(item),
                    TextureMap.layer0(Identifier.of("minecraft", "block/" + textureName)),
                    generator.writer
            );
        }
    }
}
</file>

<file path="java/ninja/trek/cakewood/CakeWoodRegistry.java">
package ninja.trek.cakewood;
import net.fabricmc.fabric.api.object.builder.v1.block.FabricBlockSettings;
import net.minecraft.block.Block;
import net.minecraft.block.Blocks;
import net.minecraft.block.MapColor;
import net.minecraft.block.piston.PistonBehavior;
import net.minecraft.item.BlockItem;
import net.minecraft.item.Item;
import net.minecraft.registry.Registries;
import net.minecraft.registry.Registry;
import net.minecraft.sound.BlockSoundGroup;
import java.util.HashMap;
import java.util.Map;
public class CakeWoodRegistry {
    // Base CakeWood block and item
    public static final CakeWoodBlock CAKE_WOOD_BLOCK = new CakeWoodBlock(
            FabricBlockSettings.create()
                    .mapColor(MapColor.BROWN)
                    .strength(0.5f)
                    .sounds(BlockSoundGroup.WOOD)
                    .nonOpaque()
                    .pistonBehavior(PistonBehavior.DESTROY)
                    .breakInstantly()
    );
    public static final BlockItem CAKE_WOOD_ITEM = new BlockItem(CAKE_WOOD_BLOCK, new Item.Settings());
    // Wood variants
    private static final Map<String, CakeWoodBlock> CAKE_WOOD_VARIANTS = new HashMap<>();
    private static final Map<String, BlockItem> CAKE_WOOD_VARIANT_ITEMS = new HashMap<>();
    public static Map<String, CakeWoodBlock> getAllVariantBlocks() {
        return CAKE_WOOD_VARIANTS;
    }
    public static Map<String, BlockItem> getAllVariantItems() {
        return CAKE_WOOD_VARIANT_ITEMS;
    }
    public static void register() {
        // Register base CakeWood
        Registry.register(Registries.BLOCK, CakeWood.id("cake_wood"), CAKE_WOOD_BLOCK);
        Registry.register(Registries.ITEM, CakeWood.id("cake_wood"), CAKE_WOOD_ITEM);
        // Register vanilla wood variants
        registerVariant("oak");
        registerVariant("spruce");
        registerVariant("birch");
        registerVariant("jungle");
        registerVariant("acacia");
        registerVariant("dark_oak");
        registerVariant("mangrove");
        registerVariant("cherry");
        registerVariant("bamboo");
        registerVariant("crimson");
        registerVariant("warped");
    }
    private static void registerVariant(String woodType) {
        CakeWoodBlock block = new CakeWoodBlock(
                FabricBlockSettings.create()
                        .mapColor(MapColor.BROWN)
                        .strength(0.5f)
                        .sounds(BlockSoundGroup.WOOD)
                        .nonOpaque()
                        .pistonBehavior(PistonBehavior.DESTROY)
                        .breakInstantly()
        );
        BlockItem blockItem = new BlockItem(block, new Item.Settings());
        Registry.register(Registries.BLOCK, CakeWood.id(woodType + "_cake_wood"), block);
        Registry.register(Registries.ITEM, CakeWood.id(woodType + "_cake_wood"), blockItem);
        CAKE_WOOD_VARIANTS.put(woodType, block);
        CAKE_WOOD_VARIANT_ITEMS.put(woodType, blockItem);
    }
    public static CakeWoodBlock getVariantBlock(String woodType) {
        return CAKE_WOOD_VARIANTS.get(woodType);
    }
    public static BlockItem getVariantBlockItem(String woodType) {
        return CAKE_WOOD_VARIANT_ITEMS.get(woodType);
    }
}
</file>

<file path="java/ninja/trek/cakewood/mixin/ExampleMixin.java">
package ninja.trek.cakewood.mixin;
import net.minecraft.server.MinecraftServer;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.injection.At;
import org.spongepowered.asm.mixin.injection.Inject;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;
@Mixin(MinecraftServer.class)
public class ExampleMixin {
	@Inject(at = @At("HEAD"), method = "loadWorld")
	private void init(CallbackInfo info) {
		// This code is injected into the start of MinecraftServer.loadWorld()V
	}
}
</file>

<file path="repomixx - dontignore.bat">
repomix --style xml --remove-empty-lines --copy
</file>

<file path="repomixx.bat">
repomix --style xml --remove-empty-lines --copy --ignore "generated/**"
</file>

<file path="resources/assets/cakewood/models/block/cake_wood_base.json">
{
  "parent": "block/block",
  "textures": {
    "particle": "#cake_texture",
    "cake_texture": "#cake_texture"
  },
  "elements": [
    {
      "from": [1, 0, 1],
      "to": [15, 8, 15],
      "faces": {
        "north": {"uv": [1, 8, 15, 16], "texture": "#cake_texture"},
        "east": {"uv": [1, 8, 15, 16], "texture": "#cake_texture"},
        "south": {"uv": [1, 8, 15, 16], "texture": "#cake_texture"},
        "west": {"uv": [1, 8, 15, 16], "texture": "#cake_texture"},
        "up": {"uv": [1, 1, 15, 15], "texture": "#cake_texture"},
        "down": {"uv": [1, 1, 15, 15], "texture": "#cake_texture"}
      }
    }
  ]
}
</file>

<file path="resources/assets/cakewood/models/item/cake_wood_item.json">
{
  "parent": "minecraft:item/generated",
  "textures": {
    "layer0": "#texture"
  }
}
</file>

<file path="resources/cakewood.mixins.json">
{
	"required": true,
	"package": "ninja.trek.cakewood.mixin",
	"compatibilityLevel": "JAVA_21",
	"mixins": [
		"ExampleMixin"
	],
	"injectors": {
		"defaultRequire": 1
	}
}
</file>

<file path="resources/fabric.mod.json">
{
	"schemaVersion": 1,
	"id": "cakewood",
	"version": "${version}",
	"name": "CakeWood",
	"description": "This is an example description! Tell everyone what your mod is about!",
	"authors": [
		"Me!"
	],
	"contact": {
		"homepage": "https://fabricmc.net/",
		"sources": "https://github.com/FabricMC/fabric-example-mod"
	},
	"license": "CC0-1.0",
	"icon": "assets/cakewood/icon.png",
	"environment": "*",
	"entrypoints": {
		"main": [
			"ninja.trek.cakewood.CakeWood"
		],
		"client": [
			"ninja.trek.cakewood.CakeWoodClient"
		],
		"fabric-datagen": [
			"ninja.trek.cakewood.CakeWoodDataGenerator"
		]
	},
	"mixins": [
		"cakewood.mixins.json",
		{
			"config": "cakewood.client.mixins.json",
			"environment": "client"
		}
	],
	"depends": {
		"fabricloader": ">=0.16.10",
		"minecraft": "~1.21",
		"java": ">=21",
		"fabric-api": "*"
	},
	"suggests": {
		"another-mod": "*"
	}
}
</file>

</files>
